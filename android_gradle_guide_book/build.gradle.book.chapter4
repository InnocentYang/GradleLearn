def Task ex41CreateTask1 = task(ex41CreateTask1)
ex41CreateTask1.doLast {
	println "创建方法原型为: Task task(String name) throws InvalidUserDataException"
	println "任务分组 : ${ex41CreateTask1.group}"
}

def Task ex41CreateTask2 = task(ex41CreateTask2, group: BasePlugin.BUILD_GROUP)
ex41CreateTask2.doLast {
	println "创建方法原型为 : Task task(Map<String, ?> args, String name) throws InvalidUserDataException"
	println "任务分组 : ${ex41CreateTask2.group}"
}

task ex41CreateTask3 {
	description "演示任务创建"
	doLast {
		println "创建方法原型为 : Task task(String name, Closure configureClosure)"
		println "任务描述 : ${description}"
	}
}

task ex42AccessTask1

ex42AccessTask1.doLast {
	println "ex42AccessTask1.doLast"
}

task ex42AccessTask2

tasks['ex42AccessTask2'].doLast {
	println "ex42AccessTask2.doLast"
}

def Task myTask = task ex43GroupTask
myTask.group = BasePlugin.BUILD_GROUP
myTask.description = "这是一个构建的引导任务"

myTask.doLast {
	println "group: ${group}, description: ${description}"
}

def Task ex45Demo = task ex45CustomTask(type: CustomTask)
ex45Demo.doFirst {
	println "Task执行之前执行 in doFirst"
}

ex45Demo.doLast {
	println "Task执行之后执行 in doLast"
}

class CustomTask extends DefaultTask {
	@TaskAction
	def doFirst() {
		println "Task自己本身在执行 in doFirst"
	}

	@TaskAction
	def doSelf() {
		println "Task自己本身在执行 in doSelf"
	}
	
	@TaskAction
	def doLast() {
		println "Task自己本身在执行 in doLast"
	}
}

task ex46OrderTask1 {
	doLast {
		println "ex46OrderTask1"
	}
}

task ex46OrderTask2 {
	doLast {
		println "ex46OrderTask2"
	}
}

ex46OrderTask1.mustRunAfter ex46OrderTask2

task ex47DisableTask {
	doLast {
		println "ex47DisableTask"
	}
}

ex47DisableTask.enabled = false

final String BUILD_APPS_ALL = "all"
final String BUILD_APPS_SHOUFA = "shoufa"
final String BUILD_APPS_EXCLUDE_SHOUFA = "exclude_shoufa"

task ex48QQRelease {
	doLast {
		println "打应用宝的包"
	}
}

task ex48BaiduRelease {
	doLast {
		println "打百度的包"
	}
}

task ex48HuaweiRelease {
	doLast {
		println "打华为的包"
	}
}

task ex48MiuiRelease {
	doLast {
		println "打MIUI的包"
	}
}

task build {
	group BasePlugin.BUILD_GROUP
	description "打渠道包"
}

build.dependsOn ex48QQRelease, ex48BaiduRelease, ex48HuaweiRelease, ex48MiuiRelease

ex48QQRelease.onlyIf {
	def execute = false
	if (project.hasProperty("build_apps")) {
		Object buildApps = project.property("build_apps")
		if (BUILD_APPS_SHOUFA.equals(buildApps)
			|| BUILD_APPS_ALL.equals(buildApps)) {
			execute = true
		} else {
			execute = false
		}
	} else {
		execute = false
	}
	execute
}

ex48BaiduRelease.onlyIf {
	def execute = false
	if (project.hasProperty("build_apps")) {
		Object buildApps = project.property("build_apps")
		if (BUILD_APPS_SHOUFA.equals(buildApps)
			|| BUILD_APPS_ALL.equals(buildApps)) {
			execute = true
		} else {
			execute = false
		}
	} else {
		execute = false
	}
	execute
}

ex48HuaweiRelease.onlyIf {
	def execute = false
	if (project.hasProperty("build_apps")) {
		Object buildApps = project.property("build_apps")
		if (BUILD_APPS_ALL.equals(buildApps)
			|| BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApps)) {
			execute = true
		} else {
			execute = false
		}
	} else {
		execute = false
	}
	execute
}

ex48MiuiRelease.onlyIf {
	def execute = false
	if (project.hasProperty("build_apps")) {
		Object buildApps = project.property("build_apps")
		if (BUILD_APPS_ALL.equals(buildApps)
			|| BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApps)) {
			execute = true
		} else {
			execute = false
		}
	} else {
		execute = false
	}
	execute
}

tasks.addRule("对该规则的一个描述, 便于调试, 查看等") { String taskName -> 
	task (taskName) {
		doLast {
			println "该${taskName}任务不存在, 请查证后再执行"
		}
	}
}

task ex49RuleTask {
	dependsOn missTask
}




